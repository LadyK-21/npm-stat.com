/*
 * This file is generated by jOOQ.
*/
package de.vorb.npmstat.persistence.jooq.routines;


import de.vorb.npmstat.persistence.jooq.Public;

import jakarta.annotation.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CreateHypertable extends AbstractRoutine<java.lang.Void> {

    private static final long serialVersionUID = 1324829682;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final Parameter<Object> MAIN_TABLE = createParameter("main_table", org.jooq.impl.DefaultDataType.getDefaultDataType("regclass"), false, false);

    /**
     * The parameter <code>public.create_hypertable.time_column_name</code>.
     */
    public static final Parameter<String> TIME_COLUMN_NAME = createParameter("time_column_name", org.jooq.impl.SQLDataType.VARCHAR, false, false);

    /**
     * The parameter <code>public.create_hypertable.partitioning_column</code>.
     */
    public static final Parameter<String> PARTITIONING_COLUMN = createParameter("partitioning_column", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("NULL::name", org.jooq.impl.SQLDataType.VARCHAR)), true, false);

    /**
     * The parameter <code>public.create_hypertable.number_partitions</code>.
     */
    public static final Parameter<Integer> NUMBER_PARTITIONS = createParameter("number_partitions", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL::integer", org.jooq.impl.SQLDataType.INTEGER)), true, false);

    /**
     * The parameter <code>public.create_hypertable.associated_schema_name</code>.
     */
    public static final Parameter<String> ASSOCIATED_SCHEMA_NAME = createParameter("associated_schema_name", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("NULL::name", org.jooq.impl.SQLDataType.VARCHAR)), true, false);

    /**
     * The parameter <code>public.create_hypertable.associated_table_prefix</code>.
     */
    public static final Parameter<String> ASSOCIATED_TABLE_PREFIX = createParameter("associated_table_prefix", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("NULL::name", org.jooq.impl.SQLDataType.VARCHAR)), true, false);

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final Parameter<Object> CHUNK_TIME_INTERVAL = createParameter("chunk_time_interval", org.jooq.impl.DefaultDataType.getDefaultDataType("anyelement"), true, false);

    /**
     * The parameter <code>public.create_hypertable.create_default_indexes</code>.
     */
    public static final Parameter<Boolean> CREATE_DEFAULT_INDEXES = createParameter("create_default_indexes", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), true, false);

    /**
     * The parameter <code>public.create_hypertable.if_not_exists</code>.
     */
    public static final Parameter<Boolean> IF_NOT_EXISTS = createParameter("if_not_exists", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), true, false);

    /**
     * The parameter <code>public.create_hypertable.partitioning_func</code>.
     */
    public static final Parameter<String> PARTITIONING_FUNC = createParameter("partitioning_func", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("NULL::regproc", org.jooq.impl.SQLDataType.VARCHAR)), true, false);

    /**
     * The parameter <code>public.create_hypertable.migrate_data</code>.
     */
    public static final Parameter<Boolean> MIGRATE_DATA = createParameter("migrate_data", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), true, false);

    /**
     * Create a new routine call instance
     */
    public CreateHypertable() {
        super("create_hypertable", Public.PUBLIC);

        addInParameter(MAIN_TABLE);
        addInParameter(TIME_COLUMN_NAME);
        addInParameter(PARTITIONING_COLUMN);
        addInParameter(NUMBER_PARTITIONS);
        addInParameter(ASSOCIATED_SCHEMA_NAME);
        addInParameter(ASSOCIATED_TABLE_PREFIX);
        addInParameter(CHUNK_TIME_INTERVAL);
        addInParameter(CREATE_DEFAULT_INDEXES);
        addInParameter(IF_NOT_EXISTS);
        addInParameter(PARTITIONING_FUNC);
        addInParameter(MIGRATE_DATA);
    }

    /**
     * Set the <code>main_table</code> parameter IN value to the routine
     */
    public void setMainTable(Object value) {
        setValue(MAIN_TABLE, value);
    }

    /**
     * Set the <code>time_column_name</code> parameter IN value to the routine
     */
    public void setTimeColumnName(String value) {
        setValue(TIME_COLUMN_NAME, value);
    }

    /**
     * Set the <code>partitioning_column</code> parameter IN value to the routine
     */
    public void setPartitioningColumn(String value) {
        setValue(PARTITIONING_COLUMN, value);
    }

    /**
     * Set the <code>number_partitions</code> parameter IN value to the routine
     */
    public void setNumberPartitions(Integer value) {
        setValue(NUMBER_PARTITIONS, value);
    }

    /**
     * Set the <code>associated_schema_name</code> parameter IN value to the routine
     */
    public void setAssociatedSchemaName(String value) {
        setValue(ASSOCIATED_SCHEMA_NAME, value);
    }

    /**
     * Set the <code>associated_table_prefix</code> parameter IN value to the routine
     */
    public void setAssociatedTablePrefix(String value) {
        setValue(ASSOCIATED_TABLE_PREFIX, value);
    }

    /**
     * Set the <code>chunk_time_interval</code> parameter IN value to the routine
     */
    public void setChunkTimeInterval(Object value) {
        setValue(CHUNK_TIME_INTERVAL, value);
    }

    /**
     * Set the <code>create_default_indexes</code> parameter IN value to the routine
     */
    public void setCreateDefaultIndexes(Boolean value) {
        setValue(CREATE_DEFAULT_INDEXES, value);
    }

    /**
     * Set the <code>if_not_exists</code> parameter IN value to the routine
     */
    public void setIfNotExists(Boolean value) {
        setValue(IF_NOT_EXISTS, value);
    }

    /**
     * Set the <code>partitioning_func</code> parameter IN value to the routine
     */
    public void setPartitioningFunc(String value) {
        setValue(PARTITIONING_FUNC, value);
    }

    /**
     * Set the <code>migrate_data</code> parameter IN value to the routine
     */
    public void setMigrateData(Boolean value) {
        setValue(MIGRATE_DATA, value);
    }
}
