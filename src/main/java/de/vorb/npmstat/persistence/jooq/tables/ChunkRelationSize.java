/*
 * This file is generated by jOOQ.
*/
package de.vorb.npmstat.persistence.jooq.tables;


import de.vorb.npmstat.persistence.jooq.Public;
import de.vorb.npmstat.persistence.jooq.tables.records.ChunkRelationSizeRecord;

import jakarta.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChunkRelationSize extends TableImpl<ChunkRelationSizeRecord> {

    private static final long serialVersionUID = -1882282928;

    /**
     * The reference instance of <code>public.chunk_relation_size</code>
     */
    public static final ChunkRelationSize CHUNK_RELATION_SIZE = new ChunkRelationSize();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChunkRelationSizeRecord> getRecordType() {
        return ChunkRelationSizeRecord.class;
    }

    /**
     * The column <code>public.chunk_relation_size.chunk_id</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Integer> CHUNK_ID = createField("chunk_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.chunk_relation_size.chunk_table</code>.
     */
    public final TableField<ChunkRelationSizeRecord, String> CHUNK_TABLE = createField("chunk_table", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.chunk_relation_size.partitioning_columns</code>.
     */
    public final TableField<ChunkRelationSizeRecord, String[]> PARTITIONING_COLUMNS = createField("partitioning_columns", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.chunk_relation_size.partitioning_column_types</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Object[]> PARTITIONING_COLUMN_TYPES = createField("partitioning_column_types", org.jooq.impl.DefaultDataType.getDefaultDataType("regtype").getArrayDataType(), this, "");

    /**
     * The column <code>public.chunk_relation_size.partitioning_hash_functions</code>.
     */
    public final TableField<ChunkRelationSizeRecord, String[]> PARTITIONING_HASH_FUNCTIONS = createField("partitioning_hash_functions", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.chunk_relation_size.ranges</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Object[]> RANGES = createField("ranges", org.jooq.impl.DefaultDataType.getDefaultDataType("int8range").getArrayDataType(), this, "");

    /**
     * The column <code>public.chunk_relation_size.table_bytes</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Long> TABLE_BYTES = createField("table_bytes", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.chunk_relation_size.index_bytes</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Long> INDEX_BYTES = createField("index_bytes", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.chunk_relation_size.toast_bytes</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Long> TOAST_BYTES = createField("toast_bytes", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.chunk_relation_size.total_bytes</code>.
     */
    public final TableField<ChunkRelationSizeRecord, Long> TOTAL_BYTES = createField("total_bytes", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.chunk_relation_size</code> table reference
     */
    public ChunkRelationSize() {
        this(DSL.name("chunk_relation_size"), null);
    }

    /**
     * Create an aliased <code>public.chunk_relation_size</code> table reference
     */
    public ChunkRelationSize(String alias) {
        this(DSL.name(alias), CHUNK_RELATION_SIZE);
    }

    /**
     * Create an aliased <code>public.chunk_relation_size</code> table reference
     */
    public ChunkRelationSize(Name alias) {
        this(alias, CHUNK_RELATION_SIZE);
    }

    private ChunkRelationSize(Name alias, Table<ChunkRelationSizeRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private ChunkRelationSize(Name alias, Table<ChunkRelationSizeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChunkRelationSize as(String alias) {
        return new ChunkRelationSize(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChunkRelationSize as(Name alias) {
        return new ChunkRelationSize(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ChunkRelationSize rename(String name) {
        return new ChunkRelationSize(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ChunkRelationSize rename(Name name) {
        return new ChunkRelationSize(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public ChunkRelationSize call(Object mainTable) {
        return new ChunkRelationSize(DSL.name(getName()), null, new Field[] { 
              DSL.val(mainTable, org.jooq.impl.DefaultDataType.getDefaultDataType("regclass"))
        });
    }

    /**
     * Call this table-valued function
     */
    public ChunkRelationSize call(Field<Object> mainTable) {
        return new ChunkRelationSize(DSL.name(getName()), null, new Field[] { 
              mainTable
        });
    }
}
